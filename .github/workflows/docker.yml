name: Docker Build and Publish

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: ghcr.io
  NAMESPACE: metis-router

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service:
          - name: server
            context: ./server
            dockerfile: Dockerfile
          - name: backend
            context: ./client/backend
            dockerfile: Dockerfile
          - name: frontend
            context: ./client/frontend
            dockerfile: Dockerfile
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      
      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Metis ${{ matrix.service.name }}
            org.opencontainers.image.description=Metis ${{ matrix.service.name }} component
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md
            org.opencontainers.image.licenses=MIT
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.context }}/${{ matrix.service.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
      
      - name: Generate artifact attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ matrix.service.name }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        service: [server, backend, frontend]
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ matrix.service }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  integration-test:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create test environment file
        run: |
          cp .env.example .env
          echo "OPENAI_API_KEY=test-key" >> .env
      
      - name: Pull built images
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/server:${{ github.ref_name }}
          docker pull ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/backend:${{ github.ref_name }}
          docker pull ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/frontend:${{ github.ref_name }}
      
      - name: Tag images for local testing
        run: |
          docker tag ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/server:${{ github.ref_name }} metis-server:latest
          docker tag ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/backend:${{ github.ref_name }} metis-backend:latest
          docker tag ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/frontend:${{ github.ref_name }} metis-frontend:latest
      
      - name: Start services with docker-compose
        run: |
          docker-compose up -d
          sleep 30  # Wait for services to start
      
      - name: Test service health endpoints
        run: |
          # Test frontend health
          curl -f http://localhost:3000/api/health || exit 1
          
          # Test backend health
          curl -f http://localhost:8000/health || exit 1
          
          # Test server health
          curl -f http://localhost:9999/health || exit 1
      
      - name: Test service connectivity
        run: |
          # Test that frontend can reach backend
          docker-compose exec -T frontend curl -f http://backend:8000/health || exit 1
          
          # Test that backend can reach server
          docker-compose exec -T backend curl -f http://server:9999/health || exit 1
      
      - name: Collect logs on failure
        if: failure()
        run: |
          echo "=== Docker Compose Logs ==="
          docker-compose logs
          echo "=== Container Status ==="
          docker-compose ps
      
      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v
          docker system prune -f

  release:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan, integration-test]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Docker Images
            
            The following Docker images have been published to GitHub Container Registry:
            
            - `${{ env.REGISTRY }}/${{ env.NAMESPACE }}/server:${{ github.ref_name }}`
            - `${{ env.REGISTRY }}/${{ env.NAMESPACE }}/backend:${{ github.ref_name }}`
            - `${{ env.REGISTRY }}/${{ env.NAMESPACE }}/frontend:${{ github.ref_name }}`
            
            ## Quick Start
            
            ```bash
            # Pull the release
            git clone https://github.com/${{ github.repository }}.git
            cd metis-router
            git checkout ${{ github.ref_name }}
            
            # Configure environment
            cp .env.example .env
            # Edit .env with your OPENAI_API_KEY
            
            # Start with Docker
            ./docker-start.sh
            ```
            
            ## Changes
            
            See the [CHANGELOG.md](CHANGELOG.md) for detailed changes in this release.
          draft: false
          prerelease: false